openapi: 3.0.0
info:
  title: Barberia
  version: 1.0.0
servers:
  - url: http://{{url}}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
  schemas:
    User:
      type: object
      properties:
          id:
            type: string
            format: uuid
            description: The unique identifier for a user.
          firstName:
            type: string
            description: The first name of the user.
          lastName:
            type: string
            description: The last name of the user.
          email:
            type: string
            format: email
            description: The email address of the user.
          profileImage:
            type: string
            format: uri
            description: The URL of the user's profile image.
          phone:
            type: string
            description: The phone number of the user.
          password:
            type: string
            description: The password of the user.
          role:
            type: string
            enum: [admin, barber, client]
            description: The role of the user. Possible values are "admin", "barber", or "client".
tags:
  - name: Auth
  - name: Users
  - name: Appointments
  - name: Reviews
  - name: Servicios barbero
  - name: Productos
  - name: Ordenes
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Registrar un usuario
      description: Registra un usuario en la aplicacion
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: Timoteo
                lastName: Barrera
                email: t.barrera@mail.com
                phone: '1234567899'
                password: '123456'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  code: 201
                  message: "Nuevo usuario registrado"
                  body: "Usuario registrado de manera exitosa"
        '400': 
          description: Bad request
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  message: "El apellido es obligatorio, Email incorrecto"
        '401': 
          description: Unauthorized
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  message: "Credenciales inválidas"
                  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login de usuario
      description: Permite que el usuario haga login en la aplicacion
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: t.barrera@mail.com
                password: '123456'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200,
                  message: "Login exitoso"
                  body: 
                    user: 
                      id: "4f2934f0-47cf-4206-9a79-dcdf991df25c"
                      firstName: "Timoteo"
                      lastName: "Barrera"
                      role: "client"
                      email: "t.barrera@mail.com"
                      phone: "1234567899"
                      profileImage: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    token: "eyJhbGciOiJIUzI1MiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZhYWM5NmFgLTFkN2MtNGQ1MS04ZjY2LWRjNDViY2M3N2M1MCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY4MTc2NzY1MCwiZXhwIjoxNjgxODU0MDUwfQ.L5KQGlEUvKJHMCG-QNbaRUe24S8S4Rdr1cNjscP5UVc"
        '400': 
          description: Bad request
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  message: "El apellido es obligatorio, Email incorrecto"
            
  /auth/verifyEmail:
    post:
      tags:
        - Auth
      summary: Verificar email usuario
      description: Permite verificar un usuario mediante una url que se le envia al correo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: t.barrera@mail.com
                verificationToken: >-
                  8f666f7dc218fe05633c4c13163c20ae419f62e72af1a5d25d366e4c9514cdec607578ada15d6719
      responses:
        '200':
          description: Respuesta exitosa
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Usuario verificado de manera exitosa"
  /auth/resetPass:
    post: 
      tags:
        - Auth
      summary: Permite cambiar la contrasña
      description: El usuario puede cambiar su contraseña. Requiere del token del usuario.
      security:
        - bearerAuth: []
      requestBody:
        content: 
          application/json:
            schema: 
              type: object
              example: 
                email: "t.barrera@mail.com" 
                oldPassword: "123456" 
                newPassword: "234567" 
                confirmNewPassword: "234567"
      responses:
        '200':
          description: Respuesta exitosa
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Contraseña actualizada."
                  body: "La contraseña ha sido actualizada."
  /users/all/barber:
    get:
      tags:
        - Users
      summary: Obtener listado de usuarios por role "barber"
      description: Devuelve un listado con todos los barberos.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Barberos listados de manera exitosa"
                  body: 
                    count: 2
                    rows: 
                      - id: "a2639154-9d9f-4290-882b-bef9090a5878"
                        firstName: "Samuel"
                        lastName: "Vázquez"
                        email: "Magdalena_Arenas@hotmail.com"
                        profileImage: "https://randomuser.me/api/portraits/men/0.jpg"
                        phone: "7253581125"
                        role: "barber"
                        description: "descripcion del barbero."
                        verificationToken: ""
                        verified: true
                        createdAt: "2023-04-15T20:10:04.274Z"
                        updatedAt: "2023-04-15T20:10:04.274Z"
                      - id: "05bda72a-568e-4476-bc61-d2ad0ecae7b3"
                        firstName: "Eduardo"
                        lastName: "Calvillo"
                        email: "Mariana_Rico40@yahoo.com"
                        profileImage: "https://randomuser.me/api/portraits/men/1.jpg"
                        phone: "8165971290"
                        role: "barber"
                        description: "descripcion del barbero."
                        verificationToken: ""
                        verified: true
                        createdAt: "2023-04-15T21:34:57.408Z"
                        updatedAt: "2023-04-15T21:34:57.408Z"
  /users/all/client:
    get:
      tags:
        - Users
      summary: Obtener listado de usuarios por role "client"
      description: Devuelve un listado con todos los clientes.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Clientes listados de manera exitosa"
                  body: 
                    count: 2
                    rows: 
                      - id: "a2639154-9d9f-4290-882b-bef9090a5878"
                        firstName: "Samuel"
                        lastName: "Vázquez"
                        email: "Magdalena_Arenas@hotmail.com"
                        profileImage: "https://randomuser.me/api/portraits/men/0.jpg"
                        phone: "7253581125"
                        role: "client"
                        verificationToken: ""
                        verified: true
                        createdAt: "2023-04-15T20:10:04.274Z"
                        updatedAt: "2023-04-15T20:10:04.274Z"
                      - id: "05bda72a-568e-4476-bc61-d2ad0ecae7b3"
                        firstName: "Eduardo"
                        lastName: "Calvillo"
                        email: "Mariana_Rico40@yahoo.com"
                        profileImage: "https://randomuser.me/api/portraits/men/1.jpg"
                        phone: "8165971290"
                        role: "client"
                        verificationToken: ""
                        verified: true
                        createdAt: "2023-04-15T21:34:57.408Z"
                        updatedAt: "2023-04-15T21:34:57.408Z"
                      
  /users/showMe:
    get:
      tags:
        - Users
      summary: Mostrar informacion del usuario activo
      description: Muestra la informacion del usuario que tiene la sesion activa.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200,
                  message: "Login exitoso"
                  body: 
                    id: "ac81fe85-8161-444d-96fe-ee41fcc2c248"
                    firstName: "Timoteo"
                    lastName: "Barrera"
                    role: "client"
                    email: "t.barrera@mail.com"
                    phone: "1234567899"
                    profileImage: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    description: null
                    verificationToken: ""
                    verified: true
                    createdAt: "2023-04-17T22:07:01.952Z"
                    updatedAt: "2023-04-17T22:09:30.237Z"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Obtener usuario por Id
      description: Devuelve la informacion de un usuario por su Id.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example:
                  code: 200
                  message: "Usuario encontrado"
                  body: 
                    id: "72d0eac4-e88e-4886-b0a7-fbe40899de95"
                    firstName: "Francisca"
                    lastName: "Rubio"
                    email: "Diana_Salcido98@yahoo.com"
                    profileImage: "https://randomuser.me/api/portraits/men/37.jpg"
                    phone: "8897887910"
                    role: "client"
                    description: ""
                    verificationToken: ""
                    verified: true
                    createdAt: "2023-04-16T08:58:27.738Z"
                    updatedAt: "2023-04-16T08:58:27.738Z"
    patch:
      tags:
        - Users
      summary: Actualizar usuario por Id
      description: Permite actualizar la informacion de un usuario.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: "Oscar"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example:
                  code: 200
                  message: "Usuario actualizado de manera exitosa"
                  body: 
                    user:
                      id: "ac81fe85-8161-444d-96fe-ee41fcc2c248"
                      firstName: "Oscar"
                      lastName: "Barrero"
                      email: "t.barrero@mail.com"
                      profileImage: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                      phone: "1234567890"
                      role: "client"
                      description: ""
                      verificationToken: "11da1d6007b1121e6f8545433bbd4911f3fe37b73c460883b932845799366b2b236691f2317aecd7"
                      verified: true
                      createdAt: "2023-04-17T22:07:01.952Z"
                      updatedAt: "2023-04-17T23:06:11.701Z"
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjODFmZTg1LTgxNjEtNDQ0ZC05NmZlLWVlNDFmY2MyYzI0OCIsInJvbGUiOiJjbGllbnQiLCJpYXQiOjE2ODE3NzMzNTksImV4cCI6MTY4MTg1OTc1OX0.W4_XFCa5bJyC5ZB15JYWYWT4t8S6rVx5rr9ip_rtI3g"
    delete:
      tags:
        - Users
      summary: Eliminar usuario por Id
      description: Permite eliminar un usuario por su Id.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  message: Usuario 13f12fd1-d6d8-45ec-98ac-4d2a65f05c7b eliminado
  /users/changeRole/{id}:
    patch:
      tags:
        - Users
      summary: Actualizar rol usuario
      description: Permite cambiar el rol de un usuario.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: barber
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Rol del usuario modificado"
                  body: 
                    user:
                      id: "ac81fe85-8161-444d-96fe-ee41fcc2c248"
                      firstName: "Oscar"
                      lastName: "Barrero"
                      email: "t.barrero@mail.com"
                      profileImage: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                      phone: "1234567890"
                      role: "barber"
                      description: ""
                      verificationToken: "11da1d6007b1121e6f8545433bbd4911f3fe37b73c460883b932845799366b2b236691f2317aecd7"
                      verified: true
                      createdAt: "2023-04-17T22:07:01.952Z"
                      updatedAt: "2023-04-17T23:06:11.701Z"
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFjODFmZTg1LTgxNjEtNDQ0ZC05NmZlLWVlNDFmY2MyYzI0OCIsInJvbGUiOiJjbGllbnQiLCJpYXQiOjE2ODE3NzMzNTksImV4cCI6MTY4MTg1OTc1OX0.W4_XFCa5bJyC5ZB15JYWYWT4t8S6rVx5rr9ip_rtI3g"

  /users/analyticsbarber/{barberId}:
    get:
      tags:
        - Users
      summary: Resumen actividades barbero
      description: Muestra un resumen de todos los servicios que hizo el barbero en un determinado periodo de tiempo, asi mismo muestra el precio de cada servicio, el porcentaje de cada servicio que le toca a cada barbero y el total a pagar a dicho barbero.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            example: "23-04-15"
          description: Fecha inicial a evaluar
        - in: query
          name: endDate
          schema:
            type: string
            example: "23-04-22"
          description: Fecha final a evaluar
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema: 
                type: object
                example: 
                  code: 200
                  message: "Resumen actividades barbero"
                  body: 
                    barberInfo: 
                      id: "a2639154-9d9f-4290-882b-bef9090a5878"
                      firstName: "Samuel"
                      lastName: "Vázquez"
                      profileImage: "https://randomuser.me/api/portraits/men/0.jpg"
                      email: "Magdalena_Arenas@hotmail.com"
                      phone: "7253581125"
                    servicesAnalytics: 
                      - name: "Lavado Y Perfilado"
                        singleCost: 28381
                        totalCost: 56762
                        quantity: 2
                        singleTotalBarber: 14190.5
                        totalBarber: 28381
                      - name: "Corte Pelo Y Barba"
                        singleCost: 24680
                        totalCost: 24680
                        quantity: 1
                        singleTotalBarber: 12340
                        totalBarber: 12340
                    "paymentBarber": 40721
  /appointments/dd341958-c591-41fc-bcf5-c30bd841be56:
    post:
      tags:
        - Appointments
      summary: Crear turno
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                date: '2023-06-25'
                hour: '7:30'
                servicesId: feb05637-c493-4b19-8973-bc3ffed6150f
                message: mensaje de prueba
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /appointments/80282cca-6d14-4f3a-8550-172cc4bafa04:
    get:
      tags:
        - Appointments
      summary: Listar turnos por id barbero
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /appointments/06777217-13e5-4d3c-96db-ad37a5035c12:
    patch:
      tags:
        - Appointments
      summary: Actualizar turno por id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                newDate: '2023-06-26T00:00:00.000Z'
                newHour: '10:10'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /appointments/myAppointments:
    get:
      tags:
        - Appointments
      summary: Obtener mis turnos como usuario activo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /appointments/cancel/06777217-13e5-4d3c-96db-ad37a5035c12:
    patch:
      tags:
        - Appointments
      summary: Cancelar turno por Id
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reviews/7374b126-c714-42bd-89bd-a24151293ea8:
    post:
      tags:
        - Reviews
      summary: Crear reseña barbero
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: muy buen trabajo
                rating: 4
                comment: muy buen barbero
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reviews/70270547-7897-471f-b049-41a16012b734:
    get:
      tags:
        - Reviews
      summary: Obtener reseñas barbero
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reviews/review/ddf79d6a-21c1-48cb-aac1-e6d529c99c6d:
    get:
      tags:
        - Reviews
      summary: Obtener reseña por Id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reviews/review/7091ae9f-b044-4a8a-baa7-00b2fbeee7e6:
    delete:
      tags:
        - Reviews
      summary: Eliminar reseña por Id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /servicesbarber:
    post:
      tags:
        - Servicios barbero
      summary: Crear servicio barbero
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: nuevo servicio
                cost: 16000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Servicios barbero
      summary: Obtener servicios disponibles
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /servicesbarber/4088ad8d-2fc7-4db1-ad31-dd31d6d6c9af:
    get:
      tags:
        - Servicios barbero
      summary: Obtener un servicio disponible
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /servicesbarber/70044f36-775b-4403-b616-fc961dfd8c93:
    patch:
      tags:
        - Servicios barbero
      summary: Actualizar un servicio disponible
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: eliminame
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /servicesbarber/58ee379d-3cab-45e3-9225-559df597ce66:
    delete:
      tags:
        - Servicios barbero
      summary: Actualizar un servicio disponible Copy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /products:
    post:
      tags:
        - Productos
      summary: Crear producto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Cepillo de otro color
                description: Un cepillo de barbero de otro color
                price: 35000
                stock: 7
                productImage: >-
                  https://exitocol.vtexassets.com/arquivos/ids/564818/Cepillo-Andis-Portable-Barbero-Barberia-Barba-Cabello-Suave.jpg
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Productos
      summary: Obtener todos los productos
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /products/f9531ece-1f9b-4501-99a8-efdb5d76793f:
    get:
      tags:
        - Productos
      summary: Obtener producto por Id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Productos
      summary: Actualizar producto por Id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: tijeras
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Productos
      summary: Eliminar producto por Id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
